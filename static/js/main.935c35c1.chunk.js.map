{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","calcFunction","storedValue","produceNumber","val","currentValue","setState","input","newValue","toString","parseInt","equals","clearValues","functionButton","func","current","backtick","substring","length","className","placeholder","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.935c35c1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n state = {\n   value: 0,\n   calcFunction: \"\",\n   storedValue: null\n }\n\n  produceNumber = (val) => {\n    if (this.state.value === 0) {\n    let currentValue = val\n    this.setState({value: currentValue})\n    } else if (this.state.value !== 0) {\n    let input = val\n    let newValue = this.state.value.toString() + input\n    this.setState({value: parseInt(newValue)})\n    }\n  }\n\n  equals = () => {\n    if (this.state.calcFunction === \"+\") {\n      let currentValue = this.state.value \n      let newValue = this.state.storedValue + currentValue\n      this.setState({value: newValue})\n\n    } else if (this.state.calcFunction === \"/\") {\n      let currentValue = this.state.value \n      let newValue = this.state.storedValue/ currentValue\n      this.setState({value: newValue})\n\n    } else if (this.state.calcFunction === \"-\") {\n      let currentValue = this.state.value \n      let newValue = this.state.storedValue - currentValue\n      this.setState({value: newValue})\n\n    } else if (this.state.calcFunction === \"x\") {\n      let currentValue = this.state.value \n      let newValue = this.state.storedValue * currentValue\n      this.setState({value: newValue})\n    } \n    \n  }\n\n  clearValues = () => {\n    this.setState({value: 0, calcFunction: \"\", storedValue: null})\n  }\n\n  functionButton = (func) => { \n      let current = this.state.value\n      this.setState({storedValue: current})\n      this.setState({value: '', calcFunction: func})\n  }\n\n  backtick = () => {\n    let currentValue = this.state.value\n    if (currentValue !== 0) {\n      currentValue = currentValue.toString();\n      let newValue = currentValue.substring(0, currentValue.length -1);\n      this.setState({value: parseInt(newValue)})\n      } else if (currentValue === 0){\n        this.setState({value: 0})\n      }\n  }\n\n  render() {\n  return (\n    <div>\n      <div className=\"calc-body\">\n      <h1 className=\"value-box\" placeholder=\"0\"> {this.state.value.toString()} </h1>\n      <div className=\"button-body row1\">\n        <div className=\"clear-value\" onClick={this.clearValues}>Clear</div>\n        <div className=\"func backtick\" onClick={this.backtick}>←</div>\n        <div className=\"func\" onClick={()=> this.functionButton(\"/\")}>÷</div>\n      </div>\n      <div className=\"button-body row2\">\n      <div className=\"num\" onClick={()=> this.produceNumber(7)}>7</div>\n      <div className=\"num\" onClick={()=> this.produceNumber(8)}>8</div>\n      <div className=\"num\" onClick={()=> this.produceNumber(9)}>9</div>\n      <div className=\"func\" onClick={()=> this.functionButton(\"-\")}>-</div>\n      </div>\n      <div className=\"button-body row3\">\n      <div className=\"num\" onClick={()=> this.produceNumber(4)}>4</div>\n      <div className=\"num\" onClick={()=> this.produceNumber(5)}>5</div>\n      <div className=\"num\" onClick={()=> this.produceNumber(6)}>6</div>\n      <div className=\"func\" onClick={()=> this.functionButton(\"+\")}>+</div>\n      </div>\n      <div className=\"button-body row4\">\n      <div className=\"num\" onClick={()=> this.produceNumber(1)}>1</div>\n      <div className=\"num\" onClick={()=> this.produceNumber(2)}>2</div>\n      <div className=\"num\" onClick={()=> this.produceNumber(3)}>3</div>\n      <div className=\"func\" onClick={()=> this.functionButton(\"x\")}>x</div>\n      </div>\n      <div className=\"button-body row5\">\n      <div className=\"num zero\" onClick={()=> this.produceNumber(0)}>0</div>\n      <div className=\"func\" onClick={this.equals}>=</div>\n      </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}